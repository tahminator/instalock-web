import {
  AutoGenMatchMeta,
  EntitlementApiType,
  RiotCurrentGameApiType,
  RiotCurrentGameDataType,
  RiotMatchInfoType,
  RiotPreGameApiType,
  RiotPreGameDataType,
  RiotUserInfoType,
} from "./autogenerated";

// Hoist the exported types out under the same namespace.
export * from "./autogenerated";

/**
 * The wrapper class for interacting with Riot's API.
 */
export class RiotClient {
  /**
   * Get the user info via an auth token.
   *
   * @see [valapidocs unofficial documentation](https://valapidocs.techchrism.me/endpoint/player-info)
   */
  static async getUserInfo(authToken: string) {
    const response = await fetch("https://auth.riotgames.com/userinfo", {
      headers: {
        Authorization: `Bearer ${authToken}`,
        "User-Agent": "ShooterGame/13 Windows/10.0.19043.1.256.64bit",
        "X-Riot-ClientVersion": "release-08.07-shipping-9-2444158",
      },
    });

    const json: () => Promise<RiotUserInfoType> = () =>
      response.json.call(response);

    return { ...response, json };
  }

  /**
   * Get the entitlement token via an auth token.
   *
   * You will likely need both tokens for most routes that require authentication.
   *
   * @see [valapidocs unofficial documentation](https://valapidocs.techchrism.me/endpoint/entitlement)
   */
  static async getEntitlement(authToken: string) {
    const response = await fetch(
      "https://entitlements.auth.riotgames.com/api/token/v1",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${authToken}`,
          "Content-Type": "application/json",
        },
      },
    );

    const json: () => Promise<EntitlementApiType> = () =>
      response.json.call(response);

    return { ...response, json };
  }

  /**
   * Get an array of matches (requires player UUID, authentication token, and entitlement token).
   * Supports pagination
   *
   * @see [valapidocs unofficial documentation](https://valapidocs.techchrism.me/endpoint/competitive-updates)
   */
  static async getCompetitiveUpdates({
    puuid,
    authToken,
    entitlementToken,
    startIndex = 0,
    endIndex = 1,
  }: {
    puuid: string;
    authToken: string;
    entitlementToken: string;
    startIndex?: number;
    endIndex?: number;
  }) {
    const response = await fetch(
      `https://pd.na.a.pvp.net/mmr/v1/players/${puuid}/competitiveupdates?startIndex=${startIndex}&endIndex=${endIndex}&queue=competitive`,
      {
        headers: {
          Authorization: `Bearer ${authToken}`,
          "X-Riot-Entitlements-JWT": entitlementToken,
          "X-Riot-ClientPlatform":
            "ew0KCSJwbGF0Zm9ybVR5cGUiOiAiUEMiLA0KCSJwbGF0Zm9ybU9TIjogIldpbmRvd3MiLA0KCSJwbGF0Zm9ybU9TVmVyc2lvbiI6ICIxMC4wLjE5MDQyLjEuMjU2LjY0Yml0IiwNCgkicGxhdGZvcm1DaGlwc2V0IjogIlVua25vd24iDQp9",
          "User-Agent": "ShooterGame/13 Windows/10.0.19043.1.256.64bit",
          "X-Riot-ClientVersion": "release-08.07-shipping-9-2444158",
        },
      },
    );

    const json: () => Promise<RiotMatchInfoType> = () =>
      response.json.call(response);

    return { ...response, json };
  }

  /**
   * Get basic player data via an array of PUUIDs.
   * This basically lets you confirm if the users exists.
   *
   * @see [valapidocs unofficial documentation](https://valapidocs.techchrism.me/endpoint/name-service)
   */
  static async getPlayerByPuuid({
    authToken,
    entitlementToken,
    playerPuuids,
  }: {
    authToken: string;
    entitlementToken: string;
    playerPuuids: string[];
  }) {
    const response = await fetch(
      "https://pd.na.a.pvp.net/name-service/v2/players",
      {
        method: "PUT",
        body: JSON.stringify(playerPuuids),
        headers: {
          Authorization: `Bearer ${authToken}`,
          "X-Riot-Entitlements-JWT": entitlementToken ?? "",
          "X-Riot-ClientPlatform":
            "ew0KCSJwbGF0Zm9ybVR5cGUiOiAiUEMiLA0KCSJwbGF0Zm9ybU9TIjogIldpbmRvd3MiLA0KCSJwbGF0Zm9ybU9TVmVyc2lvbiI6ICIxMC4wLjE5MDQyLjEuMjU2LjY0Yml0IiwNCgkicGxhdGZvcm1DaGlwc2V0IjogIlVua25vd24iDQp9",
          "User-Agent": "ShooterGame/13 Windows/10.0.19043.1.256.64bit",
          "X-Riot-ClientVersion": "release-08.07-shipping-9-2444158",
        },
      },
    );

    const json: () => Promise<
      {
        DisplayName: string;
        Subject: string;
        GameName: string;
        TagLine: string;
      }[]
    > = () => response.json.call(response);

    return { ...response, json };
  }

  /**
   * Fetch the pre-match ID (if exists) via a PUUID.
   *
   * @see [valapidocs unofficial documentation](https://valapidocs.techchrism.me/endpoint/pre-game-player)
   */
  static async getPreGameMatchId({
    authToken,
    entitlementToken,
    puuid,
  }: {
    authToken: string;
    entitlementToken: string;
    puuid: string;
  }) {
    const response = await fetch(
      `https://glz-na-1.na.a.pvp.net/pregame/v1/players/${puuid}`,
      {
        headers: {
          Authorization: `Bearer ${authToken}`,
          "X-Riot-Entitlements-JWT": entitlementToken,
          "X-Riot-ClientPlatform":
            "ew0KCSJwbGF0Zm9ybVR5cGUiOiAiUEMiLA0KCSJwbGF0Zm9ybU9TIjogIldpbmRvd3MiLA0KCSJwbGF0Zm9ybU9TVmVyc2lvbiI6ICIxMC4wLjE5MDQyLjEuMjU2LjY0Yml0IiwNCgkicGxhdGZvcm1DaGlwc2V0IjogIlVua25vd24iDQp9",
          "User-Agent": "ShooterGame/13 Windows/10.0.19043.1.256.64bit",
          "X-Riot-ClientVersion": "release-08.07-shipping-9-2444158",
        },
      },
    );

    const json: () => Promise<RiotPreGameApiType> = () =>
      response.json.call(response);

    return { ...response, json };
  }

  /**
   * Retrieve full pre-match details via a preMatchId
   *
   * @see [valapidocs unofficial documentation](https://valapidocs.techchrism.me/endpoint/pre-game-match)
   */
  static async getPreGameMatchDetails({
    authToken,
    entitlementToken,
    preMatchId,
  }: {
    authToken: string;
    entitlementToken: string;
    preMatchId: string;
  }) {
    const response = await fetch(
      `https://glz-na-1.na.a.pvp.net/pregame/v1/matches/${preMatchId}`,
      {
        headers: {
          Authorization: `Bearer ${authToken}`,
          "X-Riot-Entitlements-JWT": entitlementToken,
          "X-Riot-ClientPlatform":
            "ew0KCSJwbGF0Zm9ybVR5cGUiOiAiUEMiLA0KCSJwbGF0Zm9ybU9TIjogIldpbmRvd3MiLA0KCSJwbGF0Zm9ybU9TVmVyc2lvbiI6ICIxMC4wLjE5MDQyLjEuMjU2LjY0Yml0IiwNCgkicGxhdGZvcm1DaGlwc2V0IjogIlVua25vd24iDQp9",
          "User-Agent": "ShooterGame/13 Windows/10.0.19043.1.256.64bit",
          "X-Riot-ClientVersion": "release-08.07-shipping-9-2444158",
        },
      },
    );

    const json: () => Promise<RiotPreGameDataType> = () =>
      response.json.call(response);

    return { ...response, json };
  }

  /**
   * Fetch the current match ID (if exists) via a PUUID.
   *
   * @see [valapidocs unofficial documentation](https://valapidocs.techchrism.me/endpoint/current-game-player)
   */
  static async getCurrentGameMatchId({
    authToken,
    entitlementToken,
    puuid,
  }: {
    authToken: string;
    entitlementToken: string;
    puuid: string;
  }) {
    const response = await fetch(
      `https://glz-na-1.na.a.pvp.net/core-game/v1/players/${puuid}`,
      {
        headers: {
          Authorization: `Bearer ${authToken}`,
          "X-Riot-Entitlements-JWT": entitlementToken,
          "X-Riot-ClientPlatform":
            "ew0KCSJwbGF0Zm9ybVR5cGUiOiAiUEMiLA0KCSJwbGF0Zm9ybU9TIjogIldpbmRvd3MiLA0KCSJwbGF0Zm9ybU9TVmVyc2lvbiI6ICIxMC4wLjE5MDQyLjEuMjU2LjY0Yml0IiwNCgkicGxhdGZvcm1DaGlwc2V0IjogIlVua25vd24iDQp9",
          "User-Agent": "ShooterGame/13 Windows/10.0.19043.1.256.64bit",
          "X-Riot-ClientVersion": "release-08.07-shipping-9-2444158",
        },
      },
    );

    const json: () => Promise<RiotCurrentGameApiType> = () =>
      response.json.call(response);

    return { ...response, json };
  }

  /**
   * Retrieve full current match details via a currentMatchId
   *
   * @see [valapidocs unofficial documentation](https://valapidocs.techchrism.me/endpoint/pre-game-match)
   */
  static async getCurrentGameMatchDetails({
    authToken,
    entitlementToken,
    currentMatchId,
  }: {
    authToken: string;
    entitlementToken: string;
    currentMatchId: string;
  }) {
    const response = await fetch(
      `https://glz-na-1.na.a.pvp.net/core-game/v1/matches/${currentMatchId}`,
      {
        headers: {
          Authorization: `Bearer ${authToken}`,
          "X-Riot-Entitlements-JWT": entitlementToken,
          "X-Riot-ClientPlatform":
            "ew0KCSJwbGF0Zm9ybVR5cGUiOiAiUEMiLA0KCSJwbGF0Zm9ybU9TIjogIldpbmRvd3MiLA0KCSJwbGF0Zm9ybU9TVmVyc2lvbiI6ICIxMC4wLjE5MDQyLjEuMjU2LjY0Yml0IiwNCgkicGxhdGZvcm1DaGlwc2V0IjogIlVua25vd24iDQp9",
          "User-Agent": "ShooterGame/13 Windows/10.0.19043.1.256.64bit",
          "X-Riot-ClientVersion": "release-08.07-shipping-9-2444158",
        },
      },
    );

    const json: () => Promise<RiotCurrentGameDataType> = () =>
      response.json.call(response);

    return { ...response, json };
  }

  /**
   * Attempt to lock an agent using a valid agentId. You must pass a preMatchId.
   *
   * @note This only returns a boolean based on whether or not the action was accepted by
   * Riot's servers or not. This does NOT mean the agent was successfully locked. You should
   * instead re-fetch the pre-match details and display the new changes.
   *

   * @see [valapidocs unofficial documentation](https://valapidocs.techchrism.me/endpoint/lock-character)
  *
   */
  static async lockAgent({
    authToken,
    entitlementToken,
    agentId,
    preMatchId,
  }: {
    authToken: string;
    entitlementToken: string;
    agentId: string;
    preMatchId: string;
  }) {
    const response = await fetch(
      `https://glz-na-1.na.a.pvp.net/pregame/v1/matches/${preMatchId}/lock/${agentId}`,
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${authToken}`,
          "X-Riot-Entitlements-JWT": entitlementToken,
          "X-Riot-ClientPlatform":
            "ew0KCSJwbGF0Zm9ybVR5cGUiOiAiUEMiLA0KCSJwbGF0Zm9ybU9TIjogIldpbmRvd3MiLA0KCSJwbGF0Zm9ybU9TVmVyc2lvbiI6ICIxMC4wLjE5MDQyLjEuMjU2LjY0Yml0IiwNCgkicGxhdGZvcm1DaGlwc2V0IjogIlVua25vd24iDQp9",
          "User-Agent": "ShooterGame/13 Windows/10.0.19043.1.256.64bit",
          "X-Riot-ClientVersion": "release-08.07-shipping-9-2444158",
        },
      },
    );

    if (!response.ok) {
      return { success: false };
    }

    return { success: true };
  }

  static async getMatchDetails({
    authToken,
    entitlementToken,
    matchId,
  }: {
    authToken: string;
    entitlementToken: string;
    matchId: string;
  }) {
    const response = await fetch(
      `https://pd.na.a.pvp.net/match-details/v1/matches/${matchId}`,
      {
        headers: {
          Authorization: `Bearer ${authToken}`,
          "X-Riot-Entitlements-JWT": entitlementToken,
          "X-Riot-ClientPlatform":
            "ew0KCSJwbGF0Zm9ybVR5cGUiOiAiUEMiLA0KCSJwbGF0Zm9ybU9TIjogIldpbmRvd3MiLA0KCSJwbGF0Zm9ybU9TVmVyc2lvbiI6ICIxMC4wLjE5MDQyLjEuMjU2LjY0Yml0IiwNCgkicGxhdGZvcm1DaGlwc2V0IjogIlVua25vd24iDQp9",
          "User-Agent": "ShooterGame/13 Windows/10.0.19043.1.256.64bit",
          "X-Riot-ClientVersion": "release-08.07-shipping-9-2444158",
        },
      },
    );

    const json: () => Promise<AutoGenMatchMeta> = () =>
      response.json.call(response);

    return { ...response, json };
  }
}
